<?php


/**
 * Implements hook_form_alter().
 */
function html_override_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'node_type_form') {
    $field = html_override_get_form_type($form);
    $form['display'][$field] = array(
      '#type' => 'checkbox', 
      '#title' => t('Make this content type able to override the theme.'),
      '#default_value' => variable_get($field, FALSE),
    );
    $options = array();
    foreach (field_info_instances('node', $form['#node_type']->type) AS $field_name => $data) {
      $options[$field_name] = $data['label'];
    }
    $form['display'][$field . '_field'] = array(
      '#type' => 'select', 
      '#title' => t('Select the field used to set the override'),
      '#description' => t('This field should yield a true or false, a 1 or a 0.  If it\'s a text field, the presence of any text in it will evaluate to TRUE.'),
      '#default_value' => variable_get($field . '_field', FALSE),
      '#options' => $options,
    );
    $form['#validate'][] = 'html_override_node_form_validate';
    $form['#submit'][] = 'html_override_node_form_submit';
  }
}

function html_override_get_form_type($form) {
  return 'html_override_' . $form['#node_type']->type;
}

function html_override_node_form_validate($form, &$form_state) {
  $field = html_override_get_form_type($form);
  if ($form_state['values'][$field] && !$form_state['values'][$field . '_field']) {
    form_set_error('display][' . $field . '_field', 'If this node type can override the theme, a field must be specified.');
  }
}

function html_override_node_form_submit($form, &$form_state) {
  $field = html_override_get_form_type($form);
  foreach (array('','_field') AS $f) {
    variable_set($field . $f, $form_state['values'][$field . $f]);
  }
}




function html_override_node_insert($node) {
  _html_override_display_message($node);
}

function html_override_node_update($node) {
  _html_override_display_message($node);
}

function _html_override_display_message($node) {
  $override = variable_get('html_override_' .  $node->type, FALSE);
  if ($override) {
    return drupal_set_message(html_override_cache_clear_markup(array('destination' => 'node/' . $node->nid)));
  }
}


/**
 * Generate text and a link to clear cached and make the overrides current within the
 * routing table.
 *
 * @param $destination
 *   array corresponding instructure to the return value of drupal_get_destination().
 *
 * @return
 *   string HTML markup including a tokenized link to a cache clearing function
 */
function html_override_cache_clear_markup($destination = NULL) {
  $destination = ($destination) ? $destination : drupal_get_destination();
  $options = array('query' => $destination + array('token' => drupal_get_token('admin/config/html-override/flush-cache')));
  $link = l(t('click here'), 'admin/config/html-override/flush-cache', $options);
  
  // To Do: t() this message.
  $message = "If your HTML override settings have not taken effect, then " . $link . " to clear caches.";
  return $message;
}


/**
 * Flush all caches to force updates to delivery callbacks on overridden nodes.
 */
function html_override_flush_cache() {
  if (!isset($_GET['token']) || !drupal_valid_token($_GET['token'], current_path())) {
    return MENU_ACCESS_DENIED;
  }
  drupal_flush_all_caches();
  drupal_set_message(t('Every cache cleared.'));
  drupal_goto();
}



/**
 * Implements hook_menu().
 */
function html_override_menu() {
  // Admin functions
  $items['admin/config/html-override'] = array(
    'title' => 'HTML Override Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('html_override_settings_form'),
    'access arguments' => array('administer content types'),
  );
  $items['admin/config/html-override/flush-cache'] = array(
    'page callback' => 'html_override_flush_cache',
    'access arguments' => array('flush caches'),
    'type' => MENU_CALLBACK,
  );


  foreach (node_type_get_types() AS $type => $data) {
    if (variable_get('html_override_' . $type, FALSE)) {
      // This node type is eligible; find the overridden nodes
      $field = variable_get('html_override_' . $type . '_field', FALSE);
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', $type)
        ->fieldCondition($field, 'value', '', '<>');
      $result = $query->execute();
      if (isset($result['node'])) {
        foreach (array_keys($result['node']) AS $nid) {
          $sources[] = 'node/' . $nid;
          $items['node/' . $nid] = array(
            'delivery callback' => 'html_override_deliver'
          );
        }
      }    
    }
  }
  if (count($sources) > 0) {
    // Taking care of aliases as well.
    $query = db_select('url_alias', 'u')
      ->fields('u', array('alias'))
      ->condition('source', $sources, 'IN');
    $result = $query->execute()->fetchAllKeyed(0,0);
    foreach ($result AS $path) {
      $items[$path] = array(
        'delivery callback' => 'html_override_deliver'
      );
    }
  }
  return $items;
}


/**
 * Delivery callback which just loads the body field of the node and delivers it as the
 * enture web page.
 */
function html_override_deliver($data) {
  $path = explode('/',$_GET['q']);
  $nid = array_pop($path);
  $node = node_load($nid);
  print $node->body['und'][0]['value'];
}